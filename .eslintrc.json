{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "sourceType": "module",
    "project": ["./tsconfig.json"],
    "extraFileExtensions": [".md"]
  },
  "plugins": ["@typescript-eslint", "simple-import-sort", "import"],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:import/typescript",
    "prettier"
  ],
  "settings": {
    "import/resolver": {
      "node": {
        "paths": ["."]
      }
    }
  },
  "globals": {
    "Atomics": "readonly",
    "SharedArrayBuffer": "readonly",
    "process": "readonly",
    "global": "readonly",
    "window": true
  },
  "overrides": [
    {
      "files": ["*.test.ts"],
      "plugins": ["jest"],
      "extends": ["plugin:jest/recommended"],
      "rules": { "jest/prefer-expect-assertions": "off" }
    }
  ],
  "ignorePatterns": ["dist/*"],
  "env": { "es2023": true, "node": true },
  "rules": {
    "no-undef": "error",
    "@typescript-eslint/no-use-before-define": "off",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-unused-vars": ["error", { "caughtErrors": "none" }],
    "camelcase": "off",
    "semi": [2, "never"],
    "@typescript-eslint/camelcase": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-unsafe-enum-comparison": "off",
    "@typescript-eslint/no-explicit-any": "off",
    "simple-import-sort/exports": "warn",
    "simple-import-sort/imports": [
      "warn",
      {
        "groups": [
          // ext library & side effect imports
          ["^@?\\w", "^\\u0000", "^@blockone/*"],
          // relative paths up until 3 level
          ["^\\./?$", "^\\.(?!/?$)"],
          [
            "^\\.\\./?$",
            "^\\.\\.(?!/?$)",
            "^\\.\\./\\.\\./?$",
            "^\\.\\./\\.\\.(?!/?$)",
            "^\\.\\./\\.\\./\\.\\./?$",
            "^\\.\\./\\.\\./\\.\\.(?!/?$)",
            // other that did not fit in
            "^"
          ]
        ]
      }
    ]
  }
}
